.. _pyterrier.schematic:

pt.schematic - Visualizing Pipelines
-----------------------------------------------------

Schematics let you visualize :class:`~pyterrier.Transformer` objects. They are especially useful for
understanding the structure of complex pipelines and checking the whether the input/output specifications of
individual transformers are compatible with one another.

For example, here is a schematic of a complex pipeline that uses multiple retrieval methods and query rewrites:

.. schematic::
    import pyterrier_alpha as pta
    index = pt.Artifact.from_hf('pyterrier/vaswani.terrier')
    dataset = pt.get_dataset('irds:vaswani')
    pta.fusion.RRFusion(
        index.bm25(),
        pt.rewrite.SDM() >> index.bm25(),
        index.bm25() >> pt.rewrite.RM3(index.index_ref()) >> index.bm25(),
    ) >> dataset.text_loader()

In notebooks (Jupyter, Colab, etc.) schematics are rendered automatically when the output of a cell is a
:class:`~pyterrier.Transformer`. You can also pass a transformer to :func:`pyterrier.schematic.draw`
to get a self-contained HTML version of the schematic for rendering elsewhere.

.. note::
    If you just want to use schematics to view the structure of a transformer or pipeline, this is all you need to know!
    The rest of this page provides more technical detail on how schematics are constructed and rendered.

Schematics are generated by first converting a transformer into an intermediate simple object format (``SchematicDict``).
Transformers can always have their corresponding ``SchematicDict`` representation generated automatically (using :ref:`pt.inspect <pyterrier.inspect>`).
They can also override and extend the default behavior to customize the appearance of the schematic by implementing the
:class:`~pyterrier.schematic.HasSchematic` protocol. ``SchematicDict`` representations are then rendered into HTML by
:func:`~pyterrier.schematic.draw`.

``SchematicDict``
============================================================

See below for the structure of the ``SchematicDict`` representation.

.. code-block:: text
    :caption: SchematicDict structure

    SCHEMATIC = PIPELINES | PIPELINE | TRANSFORMER

    PIPELINES = [PIPELINE | TRANSFORMER]

    PIPELINE = {
        "type": "pipeline",
        "label": str | None,           # Short label for presentation on schematic
        "input_columns": [str],        # Overall input columns of entire pipeline
        "output_columns": [str],       # Overall output columns of entire pipeline
        "transformers": [TRANSFORMER], # List of transformers in this pipeline
    }

    TRANSFORMER = {
        "type": "transformer",
        "label": str,                        # Short label for presentation on schematic (default from .__class__.__name__)
        "name": str,                         # Full name of the transformer class for the title of the tooltip (default from .__class__.__name__)
        "input_columns": [str],              # (default from pt.inspect.transformer_inputs)
        "output_columns": [str],             # (default from pt.inspect.transformer_outputs)
        "help_url": str | None,              # URL of documentation page (default from pt.documentation.url_for_class)
        "settings": Dict[str, Any],          # Transformer configruation to show in body of tooltip (default from pt.inspect.transformer_attributes)
        "inner_pipelines": PIPELINES | None, # Pipelines to show within this block (default from pt.inspect.subtransformers)
        "inner_pipelines_mode": "unlinked" | "linked" | None # How to display the inner pipelines, either as a linked or unlinked set of pipelines (default unlinked)
    }

Rendering in Documentation
=================================================================

You can render schematics directly in PyTerrier documentation using the ``.. schematic::`` directive. The body of the directive
should be either a Python code block that creates a transformer to render or a ``SchematicDict`` object to render. The former is
useful for documenting individual transformers, while the latter is useful for demonstrative/abstract purposes, or cases where
running the code to construct the transformer is too costly for documentation (e.g., if it involves loading a large neural network).

PyTerrier is imported by default, so you can use the ``pt`` shorthand.

.. code-block:: text
    :caption: Rendering a BM25 transformer schematic in RST-formatted documentation.

    .. schematic::
        pt.Artifact.from_hf('pyterrier/vaswani.terrier').bm25()


.. schematic::
    pt.Artifact.from_hf('pyterrier/vaswani.terrier').bm25()


.. code-block:: text
    :caption: Rendering a simple SchematicDict in RST-formatted documentation.

    .. schematic::
        {
            "type": "transformer",
            "label": "Retriever",
            "input_columns": ["qid", "query"],
            "output_columns": ["qid", "query", "docno", "score", "rank"]
        }

.. schematic::
    {
        "type": "transformer",
        "label": "Retriever",
        "input_columns": ["qid", "query"],
        "output_columns": ["qid", "query", "docno", "score", "rank"]
    }


API Documentation
============================================================

.. autoclass:: pyterrier.schematic.HasSchematic()
    :members:
