Artifacts
------------------------------------------------

PyTerrier's Artifact API provides a powerful way to share resources, such as indexes,
cached results, and more. Re-using one another's artifacts is a great way to help achieve
green (i.e., sustainable) research. [#]_

Shared artifacts are also ready-to-use in your experiments through objects that expose various
retrieval functionality through :doc:`Transformers <transformer>`. For instance, once you load a
``TerrierIndex`` artifact, you can use its ``bm25()`` method to build a transformer that retrieves
from the index using BM25.

The API is provided by the :class:`~pyterrier.Artifact` classs, which includes methods
for sharing artifacts using a variety of services, such as HuggingFace Hub and Zenodo.

.. note::
    **What is an Artifact?** "Artifact" often refers to a broad range of items. For
    instance, the `ACM defines  <https://www.acm.org/publications/policies/artifact-review-and-badging-current>`__
    an artifact as: "a digital object that was either created by the authors to be used as part of the study
    or generated by the experiment itself."

    In PyTerrier, we use a narrower definition. We treat artifacts as components that
    can be represented as a file or directory stored on disk. These are most frequently built indexes,
    but can also be resources such as cached pipeline results.


Sharing Artifacts using HuggingFace
=================================================

The `HuggingFace Hub <https://huggingface.co/docs/hub>`__ is a popular platform for sharing artifacts,
like models, datasets, etc. You can also shar PyTerrier artifacts on HuggingFace Hub using the Artifact API
with :meth:`~pyterrier.Artifact.from_hf` and :meth:`~pyterrier.Artifact.to_hf`.

**Loading from HuggingFace:** You can load artifacts from HuggingFace Hub using :meth:`~pyterrier.Artifact.from_hf`:

.. code-block:: python
    :caption: Load an artifact from HuggingFace Hub

    >>> import pyterrier as pt
    >>> index = pt.Artifact.from_hf('username/myindex')

The method will download the artifact package and return an :class:`~pyterrier.Artifact` object of the corresponding
type.

**Pushing to HuggingFace:** To share an artifact that you've built to HuggingFace Hub, use an artifact's :meth:`~pyterrier.Artifact.to_hf` method:

.. code-block:: python
    :caption: Share an artifact to HuggingFace Hub

    >>> import pyterrier as pt
    >>> artifact = ... # e.g., pt.terrier.TerrierIndex('path/to/index')
    >>> artifact.to_hf('username/myindex')

The above code will build and upload an artifact distribution package suitable for HuggingFace. A template
``README.md`` file is also created. We recommend completing it to help others understand your artifact.

.. note::
    You need to have the package ``huggingface-hub`` installed to upload to HuggingFace Hub. You will
    also need to have your ``HF_TOKEN`` envirionment variable set with the "write" permission to use this
    feature. Find more information `here <https://huggingface.co/docs/huggingface_hub/en/quick-start#authentication>`__.

**HuggingFace Extras:**

You can find all PyTerrier artifacts on HuggingFace hub by searching for the `pyterrier-artifact 
<https://huggingface.co/datasets?other=pyterrier-artifact>`__ tag.

You can also load from HuggingFace using: ``pt.Artifact.from_url('hf:username/repo')``

HuggingFace Hub limits the maximum size of individual files. This integration automatically splits large
artifact distribution packages into smaller files to adhere to this limit---you don't need to do anything
special when pushing or loading.

Artifacts uses the ``main`` branch by default. You can change this by speciying the ``branch=`` parameter of
:meth:`~pyterrier.Artifact.to_hf` and :meth:`~pyterrier.Artifact.from_hf`, or with the following format:
``username/repo@branch``.


Sharing Artifacts using Zenodo
=================================================

`Zenodo <https://zenodo.org/>`__ is a free repository for sharing research artifacts. The platform has a
retention period `for at least the next 20 years <https://about.zenodo.org/policies/>`__. You can share
PyTerrier artifacts on Zenodo using the Artifact API with :meth:`~pyterrier.Artifact.from_zenodo` and
:meth:`~pyterrier.Artifact.to_zenodo`.

**Loading from Zenodo:** You can load artifacts from Zenodo using :meth:`~pyterrier.Artifact.from_zenodo` and the
ID of the artifact (the number in the Zenodo URL).

.. code-block:: python
    :caption: Load an artifact from Zenodo

    >>> import pyterrier as pt
    >>> index = pt.Artifact.from_zenodo('artifact-id') # e.g., "13839452"

The method will download the artifact package and return an :class:`~pyterrier.Artifact` object of the corresponding
type.

**Pushing to Zenodo:** To share an artifact that you've built to Zenodo, use an artifact's :meth:`~pyterrier.Artifact.to_zenodo` method:

.. code-block:: python
    :caption: Share an artifact to Zenodo

    >>> import pyterrier as pt
    >>> artifact = ... # e.g., pt.terrier.TerrierIndex('path/to/index')
    >>> artifact.to_zenodo()

Note that at this point, the artifact is not yet published. :meth:`~pyterrier.Artifact.to_zenodo` prints the URL
of the upload. You will need to complete the provided form (e.g., adding title, authors, etc.) and publish
before it is accessible to others.

.. note::
    You need to have the ``ZENODO_TOKEN`` environment variable set with the "deposit:write" and "deposit:actions" permissions
    to upload to Zenodo. Find more information `here <https://developers.zenodo.org/#authentication>`__.

**Zenodo Extras:**

You can find all PyTerrier artifacts on Zenodo by searching for the `pyterrier-artifact 
<https://zenodo.org/search?q=metadata.subjects.subject%3A"pyterrier-artifact">`__ tag.

You can also load from Zenodo using: ``pt.Artifact.from_url('zenodo:artifact-id')``


Peer-to-Peer Artifact Sharing
=================================================

Sometimes you have work-in progress that you need to share with a collaborator, but you do not want to
publish it to a public repository. PyTerrier's Artifact API also supports one-off peer-to-peer artifact
sharing using :meth:`~pyterrier.Artifact.from_p2p` and :meth:`~pyterrier.Artifact.to_p2p`.

**Peer-to-Peer Sharing Workflow:**

On the host machine, first load the artifact that you want to share. Then, call :meth:`~pyterrier.Artifact.to_p2p`:

.. code-block:: python
    :caption: Start Peer-to-Peer Artifact Sharing

    >>> import pyterrier as pt
    >>> artifact = ... # e.g., pt.terrier.TerrierIndex('path/to/my_index')
    >>> artifact.to_p2p()
    ...
    Ready to send. Run the following on the target machine (ctrl+c to cancel):
    artifact = pt.Artifact.from_p2p('xx-xxx-xxx', 'my_index')

The command builds an artifact distribution package and generates a one-time sharing code (``xx-xxx-xxx`` above).
You can then run :meth:`~pyterrier.Artifact.from_p2p` on the receiving machine:

.. code-block:: python
    :caption: Receive a Peer-to-Peer Artifact

    >>> import pyterrier as pt
    >>> artifact = pt.Artifact.from_p2p('xx-xxx-xxx', 'my_index')

The above command will initiate a peer-to-peer transfer using `magic-wormhole <https://magic-wormhole.readthedocs.io/>`__
and return the loaded artifact.

.. note::
    You need to have the Python package ``magic-wormhole`` installed to use P2P sharing.


Sharing Artifacts with Other Services
=================================================

You can share an artifact anywhere that you can host the artifact distribution package file. You can construct
the package using :meth:`~pyterrier.Artifact.build_package` and then upload the file to your desired service.

To load an artifact that is shared this way, you just need the URL of the artifact distribution package file,
which can be passed to :meth:`~pyterrier.Artifact.from_url`.


Artifact Implementations
=================================================

Here's a list of existing :class:`~pyterrier.Artifact` implementations. (If you've added one,
feel free to make a PR to this page to add it!)

.. To add to this list, edit extras/generate_includes.py
.. include:: ./_includes/artifact_list.rst


Advanced: Writing Your Own Artifact Class
=================================================

TODO: code, entry points


Advanced: Writing Custom Artifact URL Schemes
=================================================

TODO


Advanced: Full API Documentation
=================================================

.. autoclass:: pyterrier.Artifact
    :members:


----

.. [#]
    .. cite.dblp:: conf/sigir/ScellsZZ22
